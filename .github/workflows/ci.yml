name: CI/CD Pipeline

on:
  push:
    branches: [ master, Test, STG, Prod ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
        npm run test:coverage
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
        flags: backend,frontend
        name: codecov-umbrella

  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run cypress:run
    
    - name: Upload E2E screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots/
        if-no-files-found: ignore

  deploy-test:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/Test'
    environment: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Test Environment
      run: |
        echo "Deploying to Test environment..."
        # Add your deployment commands here
        # Example: Deploy to test server or cloud platform
    
    - name: Notify Test Deployment
      run: |
        echo "Test deployment completed successfully"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/STG'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging Environment
      run: |
        echo "Deploying to Staging environment..."
        # Add your deployment commands here
    
    - name: Notify Staging Deployment
      run: |
        echo "Staging deployment completed successfully"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/Prod'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production Environment
      run: |
        echo "Deploying to Production environment..."
        # Add your deployment commands here
    
    - name: Notify Production Deployment
      run: |
        echo "Production deployment completed successfully"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high 